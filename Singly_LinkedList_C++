//  LinkedList: --- 1. Singly  2.  Doubly  3.  Circular

//  Singly Linkedlist: -- A Singly linked List a Sequence of nodes connected to one another using pointers.
//                        Following are components of Singly Linked List –
//                                                                        1.  Data – The value held
//                                                                        2.  Next Pointer – Contains the address of the next node in the sequence
// Unlike an array that is contiguous each node in a Singly Linked List is scattered all over memory and are connected to one another using pointers.

//  Time Complexity : --  1. Searching Algorithms -->  O(n)
//                        2. Deletion  Algorithms  -->  O(1)
//                        3. Insertion Algorithms  -->  O(1)
//  Space Complexity : -- O(n)

//   All operation of singly linkedlist code is below ---


#include<iostream>
using namespace std;

struct node
{
	int data;
	struct node* next;
};
struct node* head=NULL;

//   Insertion at Beginning

void insert()
{
	struct node* newnode= new node();
	
	int x;
	cout<<"Enter the data :"<<endl;
	cin>>x;
	
	newnode->data=x;
	newnode->next=head;
	head=newnode;
}

//   Insertion at tail it means 1 st node display first

void insertAttail()
{
	struct node* newnode=new node();	
	
	int x;	
	cout<<"Enter the data :"<<endl;
	cin>>x;
	
	newnode->data=x;
	newnode->next=NULL;
	if(head==NULL)
	{
		head=newnode;
	}
	else
	{
	   struct node* temp=head;
	
	   while(temp->next!=NULL)
	   {
	       temp=temp->next;
	   }
	   temp->next=newnode;	   
   }
}

//     Insertion of node at any position

void insertAtPosi()
{
	cout<<"Insertion of data at any position "<<endl;
	int x;	
	cout<<"\nEnter the data :"<<endl;
	cin>>x;
	
	int posi;
	cout<<"Enter the position :"<<endl;
	cin>>posi;
	
	struct node* newnode=new node();
	
	newnode->data=x;
	newnode->next=NULL;
	
	if(posi<1)
	{
		cout<<"Position is not in the linked list "<<endl;
	}
	else if(posi==1)
	{
		newnode->next=head;
		head=newnode;
		return;
	}
	else
	{
		struct node* temp=head;
		for(int i=1;i<posi-1;i++)
		{
			if(temp!=NULL)
			{
				temp=temp->next;
			}
		}
		
		if(temp!=NULL)
		{
			newnode->next=temp->next;
			temp->next=newnode;
		}
		else
		{
			cout<<"The previous node is empty "<<endl;
		}
	}
}

//   Traversing and printing the data

void display()
{
	struct node* temp;
	temp=head;
	
	if(head==NULL)
	{
		cout<<"No data found in the list "<<endl;
	}
	else
	{
		temp= head;
	    while(temp!=NULL)
	    {
		    cout<<temp->data<<"->";
	        temp=temp->next;
	    }
	cout<<"NULL"<<endl;
    }
}

//  delete at bottom

void deleteFirst()
{
   if(head==NULL)
   {
   	cout<<"Node is not empty";
   }
   
   node*temp=head;
   head= head->next;
   delete temp;
}

//   Delete at top node

void deleteLast()
{
   node*prev= NULL;
   node*temp= head;
   while(temp->next!=NULL)
   {
      prev= temp;
      temp=temp->next;
   }
   delete temp;
   prev->next= NULL;
}

//  insertion at any point

void deletePosi()
 {
   if (head == NULL) 
   {
      return;
   }
   int position;
   
   struct node* temp = head;
   
   cout<<"Enter the position :"<<endl;
   cin>>position;
   
   if (position == 1) 
   {
      head = temp->next;
      delete(temp);
   }
   
   for(int i = 1; temp != NULL && i < position - 1; i++)
   {
      temp = temp->next;
   }

   struct node *next = temp->next->next;
   delete(temp->next);
   temp->next = next;
}

//   Search the element by using position

void search()
{
	int pos;
    cout<<"enter the position on which you want to search in linklist"<<endl;
    cin>>pos;
    struct node* temp=head;
    int count=1;
    while(count<pos)
    { 
        temp=temp->next;
        count++;
    }
    cout<<"The data of the position is: "<<temp->data<<endl;
}

// Searching by element

void searchEle()
{
	struct node* temp;
	int i=0;
	int count;
	temp=head;
	int num;
	
	cout<<"Enter the element which you want to search "<<endl;
	cin>>num;
	if(head==NULL)
	{
		cout<<"Empty list "<<endl;
	}
	else
	{
		while(temp!=NULL)
		{
			if(temp->data == num)
			{
				cout<<"Number found at location: "<<(i+1)<<endl;
				count =0;
			}
			else
			{
				count++;
			}
			i++;
			temp=temp->next;
		}
		
	}
}



int main()
{
	int n,ch,choice;
	cout<<"Enter the total number of node :"<<endl;
	cin>>n;
	
	cout<<"Enter your choice to insert the data :"<<endl;
	cout<<"\n1.Insert at head\n2.Insert at tail\n3.exit"<<endl;
	cout<<"\nSelect your choice: --";
	cin>>choice;
	
	for(int i=0; i<n; i++)
	{
		switch(choice)
		{
			case 1:
				insert();      //   Insertion at head it means last node store at first.
				break;
				
			case 2:
			    insertAttail();      //   Insertion at tail it means first node store at first.
				break;
				
			case 3:
			    cout<<"There is no option"<<endl;
				break;
			default:
			   cout<<"Invalid choice"<<endl;	
		}
  
	}
	
	cout<<"Linked list : ";
	display();
//	insertAtPosi();
	
	cout<<"\n\nWhich operation you want to apply :";
	cout<<"\n1.Delete at Bottom\n2.Delete at Top\n3.Delete at any position\n4.Searching by the index\n5.Searching by element\n6.exit "<<endl;
	do
	{
	cout<<"\nSelect your choice :"<<endl;
	cin>>ch;
	
	switch(ch)
	{
		case 1:
			deleteFirst();
			display();
			break;
		case 2:
			deleteLast();
			display();
			break;
			
		case 3:
			deletePosi();
			display();
			break;
		
		case 4:
		    search();
			display();
			break;
			
		case 5:
		    searchEle();
			display();
			break;
						
		case 6:	
			cout<<"There is no operation of linkedlist"<<endl;
			break;
			
		default:
			cout<<"Invalid choice"<<endl;
	}
}
while(ch!=6);
	
	return 0;
}
